"""JEPX将来価格シミュレーターのメインモジュール"""

import streamlit as st
import pandas as pd
from constants import SHOW_DAYS
from data_handlers import (
    load_jepx_data,
    load_tso_data,
    load_fuel_data,
    get_power_source_parameters,
    filter_data_by_date_range
)
from models import update_power_composition, calculate_fuel_price_projection
from views import (
    set_page_style,
    create_projection_graph,
    create_detail_graph,
    create_supplementary_info,
    create_download_button
)


def main():
    """メイン処理"""
    # ページスタイルの設定
    set_page_style()

    # 基本データの読み込み
    df_jepx_mst = load_jepx_data()
    min_date, max_date = df_jepx_mst["日時"].min(), df_jepx_mst["日時"].max()
    start_date = min_date
    end_date = start_date + pd.Timedelta(days=SHOW_DAYS)

    # ヘッダーの表示
    st.header("JEPX将来価格検証")

    # エリア選択と日付入力のレイアウト
    header_b, header_c, header_c2, header_d, header_e, header_f = st.columns([
                                                                             2, 2, 1, 1, 1, 1])

    with header_b:
        area = st.selectbox(
            "エリアを選択してください(現在Tokyoのみ)",
            ["Tokyo"],
            index=0,
        )
    with header_c:
        start_date = st.date_input(
            "コマ別表示開始日を選択してください（2024基準）",
            min_date,
            min_value=min_date,
            max_value=max_date
        )
        end_date = start_date + pd.Timedelta(days=SHOW_DAYS)

    # メインコンテンツのレイアウト
    col_left, col_right = st.columns([1, 1])

    # 基準データの準備
    jepx_avg_2024 = df_jepx_mst[area].mean()
    df_tso_mst = load_tso_data(area)
    df_fuel_mst = load_fuel_data()
    fuel_index_2045_mst = df_fuel_mst["fuel_index"].iloc[-1]

    # 前提シナリオの入力UI
    with col_left:
        st.subheader("前提シナリオ：2045年想定")
        col_power, col_fuel = st.columns([1, 1])

        # 電源構成の設定
        with col_power:
            nuclear_params = get_power_source_parameters(area, "nuclear")
            solar_params = get_power_source_parameters(area, "solar")

            st.markdown("<h5>電源構成の主変化（全体容量比）</h5>", unsafe_allow_html=True)
            st.markdown(
                """
                <div style="display: flex; justify-content: space-between;">
                    <span>Low(24年同様)</span>
                    <span>系統計画</span>
                    <span>７次補正or上限</span>
                </div>
                """,
                unsafe_allow_html=True,
            )
            nuclear_ratio = st.slider(
                "原子力(%)",
                nuclear_params[0],
                nuclear_params[2],
                nuclear_params[1]
            )
            st.markdown(
                """
                <div style="display: flex; justify-content: space-between;">
                    <span>Low(24年同様)</span>
                    <span>７次補正</span>
                    <span>系統計画</span>
                </div>
                """,
                unsafe_allow_html=True,
            )

            solar_ratio = st.slider(
                "太陽光(%)",
                solar_params[0],
                solar_params[2],
                solar_params[1]
            )

        # 燃料価格・為替の設定
        with col_fuel:
            st.markdown("<h5>燃料価格・為替の推移</h5>", unsafe_allow_html=True)
            st.markdown(
                """
                <div style="display: flex; justify-content: space-between;">
                    <span>Low(24年同様)</span>
                    <span>EIA推計(1.5倍)</span>
                    <span>High(2倍)</span>
                </div>
                """,
                unsafe_allow_html=True,
            )
            st.markdown("")

            gas_dol_2045 = float(
                df_fuel_mst["gas_dol"].iloc[-1]/df_fuel_mst["gas_dol"][0])

            oil_dol_idx_update = st.slider(
                "GAS(USD/b)　24年比",
                1.0,
                2.0,
                gas_dol_2045
            )

            yen_per_dol_2045 = float(
                df_fuel_mst["yen_per_dol"].iloc[-1]/df_fuel_mst["yen_per_dol"][0])

            st.markdown(
                """
                <div style="display: flex; justify-content: space-between;">
                    <span>Low(0.65,100円)</span>
                    <span>ITI推計(0.88,135円)</span>
                    <span>High(24年同様,153円)</span>
                </div>
                """,
                unsafe_allow_html=True,
            )

            yen_per_dol_idx_update = st.slider(
                "為替(¥/$)　24年比",
                0.65,
                1.0,
                0.88,
            )

    # データ更新処理
    # 先に燃料価格の将来推計を計算
    df_fuel_update = calculate_fuel_price_projection(
        df_fuel_mst, jepx_avg_2024, df_jepx_mst, df_tso_mst,
        oil_dol_idx_update, yen_per_dol_idx_update
    )

    # 最新の燃料指数を使用して電源構成を更新
    df_jepx_power_update, df_tso_power_update = update_power_composition(
        area, df_jepx_mst, df_tso_mst,
        nuclear_ratio, solar_ratio, df_fuel_update["fuel_index"].iloc[-1]
    )

    # 年平均推計グラフの表示
    with col_right:
        st.subheader("年平均推計")
        st.markdown("<h5>エリアスポット取引価格 2024-2045</h5>", unsafe_allow_html=True)
        fig_projection = create_projection_graph(df_fuel_update)
        st.plotly_chart(fig_projection, use_container_width=True)
        price_projection_2045 = df_fuel_update["price_projection"].iloc[-1]

    # 期間指定データの準備
    df_tso_filtered = filter_data_by_date_range(
        df_tso_power_update, start_date, end_date, "datetime"
    )
    df_jepx_filtered = filter_data_by_date_range(
        df_jepx_power_update, start_date, end_date
    )
    df_jepx_mst_filtered = filter_data_by_date_range(
        df_jepx_mst, start_date, end_date
    )

    # 詳細グラフの表示
    fig_detail = create_detail_graph(
        df_jepx_mst_filtered, df_jepx_filtered,
        df_tso_filtered, area
    )
    st.plotly_chart(fig_detail, use_container_width=False)

    # 指標値の表示
    with header_d:
        st.metric(label="2024平均価格 (円/kWh)", value=round(jepx_avg_2024, 2))
    with header_e:
        st.metric(label="2045想定価格 (円/kWh)",
                  value=round(price_projection_2045, 2))
    with header_f:
        create_download_button(df_jepx_power_update)

    # 補足情報の表示
    create_supplementary_info()


if __name__ == "__main__":
    main()
    # スクロール制御は不要なので削除
